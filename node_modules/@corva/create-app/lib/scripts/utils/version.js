const NpmApi = require('npm-api');
const chalk = require('chalk');
const semver = require('semver');
const inquirer = require('inquirer');

const packageJson = require('../../../package.json');
const npm = new NpmApi();
const errorStyle = chalk.bold.red;

const getCurrentVersion = () => packageJson.version;
const getLatestVersion = async () => npm.repo('@corva/create-app').prop('version');

// NOTE: Stop process and show error if version is outdated
async function ensureLatestVersion() {
  const currentVersion = getCurrentVersion();
  const latestVersion = await getLatestVersion();

  const isCurrentVersionOutdated = semver.gt(latestVersion, currentVersion);
  if (isCurrentVersionOutdated) {
    console.log(errorStyle('****************************************************************'));
    console.log(chalk`
      Your version of the @corva/create-app is outdated.
      There is a new version available ({green.bold ${latestVersion}}).
      Please update the @corva/create-app with the following command:

          npm i -g @corva/create-app@latest

    `);
    console.log(errorStyle('****************************************************************'));
    process.exit(0);
  }
}

// NOTE: Show user-friendly warning if version is outdated
async function warnIfOutdated() {
  process.stdout.write('Checking for updates...');

  const currentVersion = getCurrentVersion();
  const latestVersion = await getLatestVersion();

  const isCurrentVersionOutdated = semver.gt(latestVersion, currentVersion);

  if (isCurrentVersionOutdated) {
    console.log('****************************************************************');
    console.log(chalk`
      There is a new version available ({green.bold ${latestVersion}}).
      You can update the CLI version with the following command:

          npm i -g @corva/create-app@latest

    `);
    console.log('****************************************************************');
  } else {
    process.stdout.write('  âœ…  \n');
  }
}

const PROMPT_MESSAGE = `Bumping package version:
${chalk.bold` Please select one of the options below:`}
  `;

const ensureBumpVersion = async (bumpVersion) => {
  if (bumpVersion) {
    return bumpVersion;
  }

  const { option, custom } = await inquirer.prompt([
    {
      message: PROMPT_MESSAGE,
      name: 'option',
      type: 'list',
      choices: [
        { value: 'major', name: 'major (x+1.y.z)' },
        { value: 'minor', name: 'minor (x.y+1.z)' },
        { value: 'patch', name: 'patch (x.y.z+1)' },
        new inquirer.Separator(),
        { value: 'custom', name: 'Enter a custom version' },
        { value: 'skip', name: 'Skip version bump' },
      ],
      default: 'patch',
    },
    {
      message: 'Enter custom version',
      name: 'custom',
      when: (answers) => answers.option === 'custom',
      type: 'input',
      validate: (input) => (semver.valid(input) ? true : 'Invalid semver version'),
    },
  ]);

  return option === 'custom' ? custom : option;
};

async function getIncreasedVersion(version, { bumpVersion: releaseTypeOrNewVersion }) {
  if (releaseTypeOrNewVersion === 'skip') {
    return version;
  }

  if (semver.valid(releaseTypeOrNewVersion)) {
    return releaseTypeOrNewVersion;
  }

  return semver.inc(version, releaseTypeOrNewVersion);
}

module.exports = { ensureLatestVersion, warnIfOutdated, getIncreasedVersion, ensureBumpVersion };
