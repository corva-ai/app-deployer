import chalk from 'chalk';
import { InvalidArgumentError, Option } from 'commander';
import semver from 'semver';

const flags = '--bump-version <string>';
const description = 'Bump version';
const choices = ['major', 'minor', 'patch', 'skip'];

function argParser(value, previous) {
  // eslint-disable-next-line no-invalid-this
  if (this.argChoices.includes(value) || semver.valid(value)) {
    return value;
  }

  throw new InvalidArgumentError(
    // eslint-disable-next-line no-invalid-this
    `Allowed choices are ${this.argChoices.map((choice) => `"${choice}"`).join(', ')} or a valid semver version.`,
  );
}
export const bumpVersionOption = new Option(flags, description).choices(choices).argParser(argParser);

export const apiKeyOption = new Option(
  '--api-key [string]',
  'Pre generated API key for authorization during app upload',
);

export const appVersion = new Option('--app-version [number]', 'App version (exp. 1, 2, 3)');

export const envOption = new Option('--env [string]', 'Environment to use').choices(['qa', 'staging', 'production']);

export const silentOption = new Option('--silent [boolean]', 'Only log result of the operation').default(false);

export const originalCwdOption = new Option('--original-cwd <string>').hideHelp();

export const bumpVersionOptionDeprecated = new Option(
  flags,
  chalk.bgYellow`DEPRECATED` + ` Use with ${chalk.cyan`zip`} or ${chalk.cyan`release`} command instead`,
)
  .choices(choices)
  .argParser(argParser);
