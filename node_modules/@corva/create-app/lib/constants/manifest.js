const { APP_RUNTIMES, APP_TYPES, TEMPLATE_TYPES } = require('./cli');

const defaultManifest = {
  format: 1,
  license: {
    type: 'MIT',
    url: 'https://www.oandgexample.com/license/',
  },
  developer: {
    name: 'O&G Company',
    identifier: 'oandgc',
    authors: [],
  },
  application: {
    type: APP_TYPES.UI,
    key: 'app.key-goes-here',
    visibility: 'private',
    name: 'Name of My App',
    description: 'This is the description of my app. You can do great things with it!',
    summary: 'More information about this app goes here',
    category: '',
    website: 'https://www.oandgexample.com/my-app/',
    segments: ['drilling', 'completion'],
  },
  settings: {
    entrypoint: {
      file: 'index.js',
      function: 'handler',
    },
    environment: {},
  },
  datasets: {},
};

const defaultUIAppManifest = {
  application: {
    ui: { initial_size: { w: 4, h: 10 } },
  },
  settings: {
    entrypoint: {
      file: 'src/index.js',
      function: 'handler',
    },
    environment: {},
  },
};

const defaultDataAppNodeManifest = {
  settings: {
    entrypoint: {
      file: 'index.js',
      function: 'handler',
    },
    timeout: 120,
    memory: 128,
    environment: {},
  },
};

const defaultDataAppPythonManifest = {
  settings: {
    entrypoint: {
      file: 'lambda_function',
      function: 'lambda_handler',
    },
    timeout: 120,
    memory: 128,
    environment: {},
  },
};

const getManifestMandatoryKeys = (opts) => {
  const keys = manifestOptions(opts.projectName).reduce((acc, option) => {
    if (option.required) {
      acc.push(option.name);
    }

    return acc;
  }, []);

  const { appType, schedulerType } = opts;

  if (appType) {
    if (appType !== APP_TYPES.UI) {
      keys.push('runtime');
    }

    if (appType === APP_TYPES.SCHEDULER) {
      if (!schedulerType) {
        keys.push('schedulerType');
      } else if (schedulerType === SCHEDULER_TYPE_DEPTH.value) {
        keys.push('depthMilestone');
      } else {
        keys.push('cronString');
      }
    }
  }

  return keys;
};

const SCHEDULER_TYPE_NATURAL_TIME = { name: 'Natural Time', value: 1 };
const SCHEDULER_TYPE_DATA_TIME = { name: 'Data Time', value: 2 };
const SCHEDULER_TYPE_DEPTH = { name: 'Date Depth', value: 4 };

const manifestOptions = (projectName = 'Corva Dev Center App') => [
  { name: 'developerName', message: 'Enter the Developer Name', default: 'O&G Company' },
  { name: 'developerIdentifier', message: 'Enter the Developer Identifier', default: 'oandgc' },
  {
    type: 'rawlist',
    name: 'appType',
    message: 'Choose the App Type',
    default: APP_TYPES.UI,
    choices: Object.values(APP_TYPES),
    required: true,
  },
  {
    type: 'rawlist',
    name: 'schedulerType',
    message: 'Choose the scheduler type',
    default: SCHEDULER_TYPE_NATURAL_TIME.value,
    choices: [SCHEDULER_TYPE_NATURAL_TIME, SCHEDULER_TYPE_DATA_TIME, SCHEDULER_TYPE_DEPTH],
    when: (answers) => answers.appType === APP_TYPES.SCHEDULER,
  },
  {
    name: 'cronString',
    message: 'Provide CRON string for the scheduler',
    default: '*/5 * * * *',
    when: (answers) =>
      answers.schedulerType && answers.schedulerType !== SCHEDULER_TYPE_DEPTH.value,
  },
  {
    name: 'depthMilestone',
    message: 'Provide depth milestone for the scheduler',
    default: 1,
    when: (answers) => answers.schedulerType === SCHEDULER_TYPE_DEPTH.value,
    filter: (value) => (isNaN(value) ? value : Number(value)),
  },
  {
    name: 'appKey',
    message: 'Enter the App Key',
    default: 'app.key-goes-here',
    required: true,
  },
  {
    name: 'appName',
    message: 'Enter the App Name',
    default: projectName,
    required: true,
  },
  {
    name: 'description',
    message: 'Enter description',
    default: 'This is the description of my app. You can do great things with it!',
  },
  {
    name: 'summary',
    message: 'Enter summary',
    default: 'More information about this app goes here',
  },
  {
    name: 'category',
    message: 'Enter category',
    default: '',
    required: true,
  },
  { name: 'website', message: 'Enter website', default: 'https://www.oandgexample.com/my-app/' },
  {
    type: 'rawlist',
    name: 'segments',
    message: 'Choose segments',
    choices: ['drilling', 'completion'],
    required: true,
  },
  {
    type: 'rawlist',
    name: 'runtime',
    message: 'Choose runtime',
    choices: (answers) => {
      if (answers && answers.appType !== APP_TYPES.UI) {
        return Object.values(APP_RUNTIMES).filter((value) => value !== APP_RUNTIMES.UI);
      }

      return Object.values(APP_RUNTIMES);
    },
    when: (answers) => answers.appType !== APP_TYPES.UI,
  },
  {
    type: 'rawlist',
    name: 'packageManager',
    message: 'Please select the desired package manager',
    alias: 'p',
    default: 'yarn',
    choices: ['yarn', 'npm'],
    when: (answers) => !answers.runtime || !answers.runtime.startsWith(TEMPLATE_TYPES.PYTHON),
  },
  {
    type: 'confirm',
    name: 'useTypescript',
    alias: 't',
    message: 'Would you like to use TypesScript?',
    default: false,
    when: (answers) =>
      (answers.runtime && answers.runtime.startsWith(TEMPLATE_TYPES.NODE)) ||
      answers.appType === APP_TYPES.UI,
  },
];

module.exports = {
  defaultManifest,
  defaultUIAppManifest,
  defaultDataAppNodeManifest,
  defaultDataAppPythonManifest,
  manifestOptions,
  getManifestMandatoryKeys,
  SCHEDULER_TYPE_NATURAL_TIME,
  SCHEDULER_TYPE_DATA_TIME,
  SCHEDULER_TYPE_DEPTH,
};
