import chalk from 'chalk';

import { logger } from '../../../helpers/logger.js';

export const ENSURE_APP_IN_STREAM_TASK_STEP = {
  message: 'Ensure that app in the stream...',
  /**
   *
   * @param {object} context
   */
  fn: async (context) => {
    const { mappedAssetsToStreams, app, api, manifest } = context;

    await Promise.all(
      [...mappedAssetsToStreams].map(([assetId, stream]) => {
        return ensureAppIsInTheStream(assetId, stream, app.id, api, manifest);
      }),
    );

    return context;
  },
};

/**
 *  Ensure if the app is in the stream, if no, add app to the stream
 *
 * @param {string} assetId
 * @param {object} stream
 * @param {string} appId
 * @param {import('../lib/api').Api} api
 * @param {object} manifest
 *
 * @returns {void}
 */
const ensureAppIsInTheStream = async (assetId, stream, appId, api, manifest) => {
  const connectedApp = stream.app_connections.find((connection) => connection.app_id === parseInt(appId));

  if (connectedApp) {
    logger.write(
      `\n\n${chalk.black.underline.bold(
        `App has been already connected to the stream ID: ${stream.id}, for asset ID: ${assetId}`,
      )}`,
    );

    return;
  }

  const newConnection = await api.connectAppToStream(appId, stream.id, manifest.manifest.settings.app);

  logger.write(
    `\n\n${chalk.black.underline.bold(
      `Added app to the stream, connect ID - ${chalk.green(newConnection.id)}, for asset ID: ${assetId}`,
    )}`,
  );
};
