import chalk from 'chalk';
import inquirer from 'inquirer';

import { logger } from '../../../helpers/logger.js';

export const GET_APP_VERSION_TASK_STEP = {
  message: 'Get app version...',
  /**
   *
   * @param {object} context
   */
  fn: async (context) => {
    const { app, options, api } = context;
    const { appVersion } = options;

    const currentAppVersion = await getAppVersion(app.id, appVersion, api);

    return {
      ...context,
      version: currentAppVersion,
    };
  },
};

/**
 *  CLI prompt question - Please choose the app version (optional).
 *
 * @param {string} appId
 * @param {string} optionAppVersion
 * @param {import('../lib/api').Api} api
 *
 * @returns {Promise<{number}>}
 */
const getAppVersion = async (appId, optionAppVersion, api) => {
  logger.write('\n    Checking app versions...');
  const appPackages = await api.getAppPackages(appId);

  if (!appPackages.length) {
    throw new Error('No app versions found');
  }

  const confirmUseVersionMessage = (version) => {
    logger.write(`\n\n${chalk.black.underline.bold(`Use app version - ${chalk.green(version)}`)}`);
  };

  // try to get version from CLI option
  if (optionAppVersion) {
    const currentAppPackageByOption = appPackages.find(
      (appPackage) => appPackage.attributes.version === optionAppVersion,
    );

    if (currentAppPackageByOption) {
      const version = currentAppPackageByOption.attributes.version;

      confirmUseVersionMessage(version);

      return version;
    }

    logger.write(`\n\n${chalk.black.underline.bold(`Could not find app version - ${chalk.green(optionAppVersion)}`)}`);
  }

  // if there is only on version, use it.
  if (appPackages.length === 1) {
    const version = appPackages[0].attributes.version;

    confirmUseVersionMessage(version);

    return version;
  }

  // if there are several versions, show versions list to user
  const choices = appPackages.map((appPackage) => {
    const parts = [];
    const { notes, label, version } = appPackage.attributes;

    if (label) {
      parts.push(label);
    }

    if (notes) {
      parts.push(notes);
    }

    if (version) {
      parts.push(version);
    }

    return {
      value: appPackage.attributes.version,
      name: parts.join(' '),
    };
  });

  logger.log('\n');

  return inquirer
    .prompt([
      {
        message: 'Please choose the app version?',
        name: 'option',
        type: 'list',
        choices,
      },
    ])
    .then((answers) => {
      return answers.option;
    });
};
