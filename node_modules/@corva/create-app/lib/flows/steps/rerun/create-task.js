import chalk from 'chalk';

import { logger } from '../../../helpers/logger.js';

export const CREATE_TASK_STEP = {
  message: 'Creating tasks...',
  /**
   *
   * @param {object} param0
   * @param {import('../../lib/api').Api} param0.api
   */
  fn: async ({
    app,
    assets,
    appDatasetsNames,
    mappedAssetsToStreams,
    mappedAssetsToWells,
    api,
    version,
    interval,
    CORVA_API_ENV,
  }) => {
    if (!assets.length) {
      logger.write(`\n\n${chalk.yellow.bold('There is no asset ID to create a new task')}`);
    }

    let i = 1;

    for (const assetId of assets) {
      const wellId = mappedAssetsToWells.get(parseInt(assetId)).id;
      const streamId = mappedAssetsToStreams.get(parseInt(assetId)).id;

      if (!wellId || !streamId) {
        logger.write(
          `\n\n${chalk.red.underline.bold(
            `Skipped creating a task for asset ID - ${assetId}, well ID or stream ID is missing`,
          )}\n\n`,
        );

        continue;
      }

      try {
        const result = await api
          .queueAppRun(app.id, version, interval, wellId, appDatasetsNames, streamId)
          .catch((e) => {
            console.log(e.response.body);
            throw e;
          });

        logger.write(
          `\n    ${i}. Created a new task with ID ${chalk.yellow(result.id)} for asset ID - ${chalk.green(assetId)}`,
        );

        logger.write(
          `\n    Task link - https://app${
            CORVA_API_ENV === 'production' ? '.' : `.${CORVA_API_ENV}.`
          }corva.ai/dev-center/apps/${app.id}/runner`,
        );
        i++;
      } catch (e) {
        logger.write(
          `\n\n${chalk.red.underline.bold(
            `Could not rerun app for asset ID - ${assetId}, an error occurred: ${e.message}`,
          )}\n\n`,
        );
      }
    }
  },
};
