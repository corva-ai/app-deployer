import { RELEASE } from '../../../constants/messages.js';
import { promises as fs } from 'node:fs';
import dotenv from 'dotenv';
import { resolve } from 'node:path';
import { StepError } from '../../lib/step-error.js';
import { Api } from '../../lib/api.js';
import { Notification } from '../../lib/notification.js';

async function getVarsFromDotEnv({ dirName }) {
  try {
    const envFile = await fs.readFile(resolve(dirName, '.env'));
    return dotenv.parse(envFile);
  } catch (error) {
    return {};
  }
}

export const SETUP_API_CLIENT_STEP = {
  message: RELEASE.getAuthToken,
  fn: async ({ dirName, options: { apiKey, env } }) => {
    const parsedEnv = await getVarsFromDotEnv({ dirName });

    const CORVA_API_ENV = env || parsedEnv.CORVA_API_ENV || process.env.CORVA_API_ENV || 'production';
    const AUTH_TOKEN = process.env.AUTH_TOKEN || parsedEnv.AUTH_TOKEN;
    const API_KEY = apiKey || process.env.API_KEY || parsedEnv.API_KEY;

    if (!AUTH_TOKEN && !API_KEY) {
      throw new StepError(RELEASE.getAuthTokenError);
    }

    const api = new Api(CORVA_API_ENV, API_KEY, AUTH_TOKEN);
    const notification = new Notification(CORVA_API_ENV);

    return {
      CORVA_API_ENV,
      api,
      notification,
    };
  },
};
