import inquirer from 'inquirer';

export const GET_ALL_LIVE_ASSETS_TASK_STEP = {
  message: 'Fetching all live assets information...',
  fn: async (context) => {
    const { manifest, api, app, notification } = context;

    const assets = await api.getAllAssets();

    notification.print(`${assets.length} - asset was found`);

    const selectedAssets = await getAssetsListWithPrompt(assets, notification);

    const assetsIds = selectedAssets.map((asset) => asset.id);
    const streams = await api.getStreamsByAssetIds(assetsIds, manifest.manifest.application.segments);

    const mappedAssetStreamsData = mapAssetsStreamsData(selectedAssets, streams);

    const assetsStreamsDataToProcess = await getAssetsStreamsWithPrompt(mappedAssetStreamsData, app.id, notification);

    return {
      ...context,
      assetsStreamsDataToProcess,
    };
  },
};

/**
 *  CLI get assets list
 *
 * @param {object[]} assets
 * @param {import('../../lib/notification').Notification} notification
 *
 * @returns {Promise<object[]>}
 */
const getAssetsListWithPrompt = (assets, notification) => {
  const choices = assets.map((asset) => {
    return {
      value: asset,
      name: notification.getAssetLink(asset.attributes.name, asset.id),
      checked: true,
    };
  });

  return inquirer
    .prompt([
      {
        message: 'Please choose assets?',
        name: 'option',
        type: 'checkbox',
        choices,
      },
    ])
    .then((res) => res.option);
};

/**
 *  Map asset and stream data
 *
 * @param {object[]} assets
 * @param {object[]} streamsData
 *
 * @returns {object[]}
 */
const mapAssetsStreamsData = (assets, streamsData) => {
  return assets.map((asset) => {
    const currentStreams = streamsData.filter((stream) => stream.asset_id === parseInt(asset.id));
    return {
      assetId: asset.id,
      assetName: asset.attributes.name,
      streams: currentStreams,
      selectedStreams: [],
    };
  });
};

/**
 *  CLI get streams list to process
 *
 * @param {object[]} mappedAssetsStreamsData
 * @param {number} appId
 * @param {import('../../lib/notification').Notification} notification
 *
 * @returns {Promise<object[]>}
 */
const getAssetsStreamsWithPrompt = async (mappedAssetsStreamsData, appId, notification) => {
  notification.printLineBreak();

  for (const mappedData of mappedAssetsStreamsData) {
    const currentStreamsCount = mappedData.streams.length;

    if (!currentStreamsCount) {
      continue;
    }

    const streamsWithoutCurrentApp = mappedData.streams.filter((stream) => {
      return !stream.app_connections.find((appConnection) => appConnection.app_id === parseInt(appId));
    });

    if (!streamsWithoutCurrentApp.length) {
      continue;
    }

    if (streamsWithoutCurrentApp.length === 1) {
      mappedData.selectedStreams = streamsWithoutCurrentApp;
      continue;
    }

    const choices = streamsWithoutCurrentApp.map((stream) => {
      return {
        value: stream,
        name: notification.getStreamLink(stream.name, stream.id),
        checked: true,
      };
    });

    const link = notification.getAssetLink(mappedData.assetName, mappedData.assetId);
    const selectedStreams = await inquirer
      .prompt([
        {
          message: `Please choose streams for the asset - ${link}?`,
          name: 'option',
          type: 'checkbox',
          choices,
        },
      ])
      .then((res) => res.option);

    mappedData.selectedStreams = selectedStreams;
  }

  return mappedAssetsStreamsData;
};
