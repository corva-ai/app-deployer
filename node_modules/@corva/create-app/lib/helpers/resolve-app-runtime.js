import debugFn from 'debug';
import { APP_TYPES } from '../constants/cli.js';

const debug = debugFn('cca:resolve-app-runtime');

import spawn from 'cross-spawn';
import { promises as fs } from 'fs';
import os from 'os';
import semver from 'semver';

const checkCliVersion = async (command, version, stdErr = false) =>
  new Promise((resolve) => {
    const child = spawn(command, ['--version']);

    let data = '';

    child.stderr.on('data', (buffer) => {
      data += buffer;
    });

    child.stdout.on('data', (buffer) => {
      data += buffer;
    });

    child.once('close', (code) => {
      if (code !== 0) {
        debug(`Command ${command} exited with code ${code}`);
        debug('Output:', data.toString());

        return resolve(false);
      }

      debug(`%s version output: %s`, command, data.toString());

      resolve(semver.satisfies(semver.coerce(data.toString('utf-8')), version));
    });
  });

const checkNodeVersion = (version) => async () => {
  try {
    await fs.access(`${os.homedir()}/.nvm/nvm.sh`);

    debug('nvm is installed');

    return true;
  } catch (e) {
    debug(e);
    debug('nvm is not installed, checking node version');

    return checkCliVersion('node', version);
  }
};

export const IS_WINDOWS = process.platform === 'win32';

export const resolveAppRuntime = (opts) => {
  if (opts.appType === APP_TYPES.UI) {
    const version = '16';

    return {
      language: opts.useTypescript ? 'typescript' : 'javascript',
      isRuntimeAvailable: checkNodeVersion(version),
      packageManager: opts.packageManager,
      version,
    };
  }

  if (opts.runtime.startsWith('node')) {
    const version = /nodejs(\d{2})\.x/.exec(opts.runtime)[1];

    return {
      language: opts.useTypescript ? 'typescript' : 'javascript',
      isRuntimeAvailable: checkNodeVersion(version),
      packageManager: opts.packageManager,
      version,
    };
  }

  const version = /python(\d\.\d)/.exec(opts.runtime)[1];

  return {
    language: 'python',
    isRuntimeAvailable: async () =>
      IS_WINDOWS
        ? (await checkCliVersion('python', version)) || (await checkCliVersion('python3', version))
        : checkCliVersion('python3', version),
    packageManager: 'pip',
    version,
  };
};
