import { APP_RUNTIMES, APP_TYPES, TEMPLATE_TYPES } from '../constants/cli.js';
import * as manifestConstants from '../constants/manifest.js';

export function fillManifest(answers) {
  const runtime = answers.runtime || APP_RUNTIMES.UI;

  const defaultManifestProperties = _defaultManifestProperties({
    type: answers.appType,
    // fallback to UI
    runtime,
  });

  const manifest = {
    ...manifestConstants.defaultManifest,
    ...defaultManifestProperties,
    developer: {
      ...manifestConstants.defaultManifest.developer,
      ...defaultManifestProperties.developer,
      name: answers.developerName,
      identifier: answers.developerIdentifier,
    },
    application: {
      ...manifestConstants.defaultManifest.application,
      ...defaultManifestProperties.application,
      key: answers.appKey,
      name: answers.appName,
      type: answers.appType,
      description: answers.description,
      summary: answers.summary,
      category: answers.category,
      website: answers.website,
      segments: [answers.segments],
    },
    settings: {
      ...defaultManifestProperties.settings,
      runtime,
      app: defaultAppSettings({
        type: answers.appType,
        schedulerType: answers.schedulerType,
        cronString: answers.cronString,
        depthMilestone: answers.depthMilestone,
      }),
    },
  };

  return manifest;
}

function _defaultManifestProperties({ type, runtime }) {
  if (type === APP_TYPES.UI) {
    return manifestConstants.defaultUIAppManifest;
  }

  if (runtime.startsWith(TEMPLATE_TYPES.PYTHON)) {
    return manifestConstants.defaultDataAppPythonManifest;
  }

  return manifestConstants.defaultDataAppNodeManifest;
}

function defaultAppSettings({ type, schedulerType, cronString, depthMilestone }) {
  if (!schedulerType || type !== APP_TYPES.SCHEDULER) {
    return {};
  }

  if (schedulerType === manifestConstants.SCHEDULER_TYPE_DEPTH.value) {
    return {
      scheduler_type: schedulerType,
      depth_milestone: depthMilestone || 1,
    };
  }

  return {
    scheduler_type: schedulerType,
    cron_string: cronString || '*/5 * * * *',
  };
}
