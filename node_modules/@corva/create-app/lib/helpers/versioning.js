import debugFn from 'debug';
import { execSync } from 'node:child_process';
import fs from 'node:fs';
import path from 'node:path';
import { logger } from './logger.js';

const debug = debugFn('cca:versioning');

export function isInGitRepository(appPath) {
  try {
    execSync('git rev-parse --is-inside-work-tree', {
      stdio: 'ignore',
      cwd: appPath,
    });

    return true;
  } catch (e) {
    debug(e);
    return false;
  }
}

export function tryGitInit(appPath) {
  try {
    if (isInGitRepository()) {
      debug('is in git repository');

      return false;
    }

    execSync('git --version', { stdio: 'ignore', cwd: appPath });

    execSync('git init', { stdio: 'ignore', cwd: appPath });
    logger.log('Initialized git repo in app');
    return true;
  } catch (e) {
    debug(e);
    console.warn('Git repo not initialized');
    return false;
  }
}

export function tryGitCommit(appPath) {
  try {
    execSync('git add -A', { stdio: 'ignore', cwd: appPath });
    execSync('git commit -m "chore: initialize project using @corva/create-app"', {
      stdio: 'ignore',
      cwd: appPath,
    });
    logger.log('Added first git commit');
    return true;
  } catch (e) {
    // We couldn't commit in already initialized git repo,
    // maybe the commit author config is not set.
    // In the future, we might supply our own committer
    // like Ember CLI does, but for now, let's just
    // remove the Git files to avoid a half-done state.
    debug(e);
    console.warn('Git commit not created');
    console.warn('Removing .git directory...');

    try {
      // unlinkSync() doesn't work on directories.
      fs.removeSync(path.join(appPath, '.git'));
    } catch (removeErr) {
      debug(removeErr);
      // Ignore.
    }

    return false;
  }
}

export function shouldUseYarn(appPath) {
  try {
    execSync('yarnpkg --version', { stdio: 'ignore', cwd: appPath });

    return true;
  } catch (e) {
    debug(e);
    return false;
  }
}
