const execSync = require('child_process').execSync;

function isInGitRepository(appPath) {
  try {
    execSync('git rev-parse --is-inside-work-tree', {
      stdio: 'ignore',
      cwd: appPath,
    });
    return true;
  } catch (e) {
    return false;
  }
}

function tryGitInit(appPath) {
  try {
    if (isInGitRepository()) {
      return false;
    }
    execSync('git --version', { stdio: 'ignore', cwd: appPath });

    execSync('git init', { stdio: 'ignore', cwd: appPath });
    console.log('Initialized git repo in app');
    return true;
  } catch (e) {
    console.warn('Git repo not initialized', e);
    return false;
  }
}

function tryGitCommit(appPath) {
  try {
    execSync('git add -A', { stdio: 'ignore', cwd: appPath });
    execSync('git commit -m "chore: initialize project using @corva/create-app"', {
      stdio: 'ignore',
      cwd: appPath,
    });
    console.log('Added first git commit');
    return true;
  } catch (e) {
    // We couldn't commit in already initialized git repo,
    // maybe the commit author config is not set.
    // In the future, we might supply our own committer
    // like Ember CLI does, but for now, let's just
    // remove the Git files to avoid a half-done state.
    console.warn('Git commit not created', e);
    console.warn('Removing .git directory...');
    try {
      // unlinkSync() doesn't work on directories.
      fs.removeSync(path.join(appPath, '.git'));
    } catch (removeErr) {
      // Ignore.
    }
    return false;
  }
}

function shouldUseYarn(appPath) {
  try {
    execSync('yarnpkg --version', { stdio: 'ignore', cwd: appPath });
    return true;
  } catch (e) {
    return false;
  }
}

module.exports = {
  isInGitRepository,
  tryGitInit,
  tryGitCommit,
};
