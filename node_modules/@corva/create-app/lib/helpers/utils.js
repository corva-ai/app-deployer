import path, { join } from 'node:path';
import fs from 'fs-extra';

export function copyFileSync(source, target) {
  let targetFile = target;

  // if target is a directory a new file with the same name will be created
  if (fs.existsSync(target)) {
    if (fs.lstatSync(target).isDirectory()) {
      targetFile = path.join(target, path.basename(source));
    }
  }

  fs.writeFileSync(targetFile, fs.readFileSync(source));
}

export function copyFolderRecursiveSync(sourceFolder, targetFolder) {
  // check if folder needs to be created or integrated
  if (!fs.existsSync(targetFolder)) {
    fs.mkdirSync(targetFolder);
  }

  if (!fs.lstatSync(sourceFolder).isDirectory()) {
    return;
  }

  // copy
  const items = fs.readdirSync(sourceFolder);

  for (const item of items) {
    const curSource = path.join(sourceFolder, item);

    if (fs.lstatSync(curSource).isDirectory()) {
      copyFolderRecursiveSync(curSource, path.join(targetFolder, item));

      continue;
    }

    copyFileSync(curSource, targetFolder);
  }
}

/**
 *
 * @param {string} root
 * @param {import('../flows/lib/manifest').Manifest} manifest
 */
export const putVariablesInEnvFile = async (root, manifest) => {
  const pathToEnvFile = join(root, '.env');
  const envFileContent = await fs.readFile(pathToEnvFile, 'utf8');

  await fs.writeFile(
    pathToEnvFile,
    envFileContent
      .replace(new RegExp('\\${APP_KEY}', 'g'), manifest.manifest.application.key)
      .replace(new RegExp('\\${PROVIDER}', 'g'), manifest.manifest.application.key.split('.')[0])
      .replace(new RegExp('\\${APP_NAME}', 'g'), manifest.manifest.application.name),
  );
};
